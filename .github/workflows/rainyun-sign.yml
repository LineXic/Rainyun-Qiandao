name: Rainyun 自动签到

on:
  schedule:
    - cron: '0 4 * * *'  # UTC+8 12点执行
    - cron: '0 0 1 * *'  # 每月1日0点执行保活机制
  workflow_dispatch:  # 允许手动触发

jobs:
  sign-in:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: 缓存Python依赖
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 移除Chrome浏览器缓存，因为缓存系统目录可能导致权限问题
      # 使用webdriver-manager自动管理ChromeDriver，无需缓存
      
      - name: 安装Chrome和ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable curl unzip
          # 使用webdriver-manager自动管理ChromeDriver版本
          pip install webdriver-manager chromedriver-binary-auto
      
      - name: 确保temp目录存在
        run: mkdir -p temp
      
      - name: 执行签到脚本
        run: python rainyun.py
        env:
          # 请在GitHub仓库的Settings > Secrets and variables > Actions中设置这些密钥
          RAINYUN_USER: ${{ secrets.RAINYUN_USER }}
          RAINYUN_PASS: ${{ secrets.RAINYUN_PASS }}
          # 设置无头模式环境变量
          HEADLESS: "true"
          # 启用调试日志
          DEBUG: "false"
          # 确保使用系统路径中的ChromeDriver
          CHROMEDRIVER_PATH: "chromedriver"
      
      - name: 清理临时文件
        run: rm -rf temp
        if: always()  # 即使前面步骤失败也执行清理
      
      # 保活机制 - 防止GitHub Actions工作流因30天不活跃而被禁用
      - name: Keepalive Workflow
        if: github.event.schedule == '0 0 1 * *'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 自动更新工作流文件以保持活跃状态
            try {
              // 获取当前工作流信息
              const workflow = await github.rest.actions.getWorkflow({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'rainyun-sign.yml'
              });
              
              // 触发工作流自己运行一次作为保活
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'rainyun-sign.yml',
                ref: context.ref
              });
              
              console.log('工作流保活成功！');
            } catch (error) {
              console.error('工作流保活失败:', error.message);
            }