name: Rainyun 自动签到

on:
  schedule:
    - cron: '0 4 * * *'  # UTC+8 12点执行
    - cron: '0 0 1 * *'  # 每月1日0点执行保活机制
  workflow_dispatch:
    # 允许手动触发，并支持传递重试参数
    inputs:
      is_retry:
        description: '是否为重试执行'
        required: false
        default: 'false'
        type: boolean
      retry_count:
        description: '重试次数'
        required: false
        default: '0'
        type: number
  # 允许workflow_dispatch事件触发，用于重试

permissions:
  # 增加必要的权限以允许触发工作流
  actions: write
  contents: read

jobs:
  sign-in:
    runs-on: ubuntu-latest
    # 添加重试策略，最多3次重试（根据需要调整）
    # 但我们会使用自定义重试逻辑以满足时间限制要求
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: 缓存Python依赖
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 移除Chrome浏览器缓存，因为缓存系统目录可能导致权限问题
      # 使用webdriver-manager自动管理ChromeDriver，无需缓存
      
      - name: 安装Chrome和ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable curl unzip
          # 使用webdriver-manager自动管理ChromeDriver版本
          pip install webdriver-manager chromedriver-binary-auto
      
      - name: 确保temp目录存在
        run: mkdir -p temp
      
      - name: 执行签到脚本
        id: sign_in
        # 添加超时时间为30分钟
        timeout-minutes: 30
        run: |
          # 添加网络连接测试
          echo "测试网络连接..."
          curl -s -o /dev/null -w "%{http_code}" https://app.rainyun.com
          
          # 显示系统信息
          echo "系统信息:"
          lsb_release -a || cat /etc/os-release
          
          # 执行签到脚本
          python rainyun.py
        env:
          # 请在GitHub仓库的Settings > Secrets and variables > Actions中设置这些密钥
          RAINYUN_USER: ${{ secrets.RAINYUN_USER }}
          RAINYUN_PASS: ${{ secrets.RAINYUN_PASS }}
          # 设置无头模式环境变量
          HEADLESS: "true"
          # 启用调试日志
          DEBUG: "true"
          # 确保使用系统路径中的ChromeDriver
          CHROMEDRIVER_PATH: "chromedriver"
          # 增加网络超时设置
          CONNECTION_TIMEOUT: "30"
      
      - name: 清理临时文件
        run: rm -rf temp
        if: always()  # 即使前面步骤失败也执行清理
      
      # 失败重试机制 - 优化版
      - name: 检查执行状态并安排重试
        if: failure() && github.event_name != 'schedule' || (failure() && github.event_name == 'schedule' && github.event.schedule != '0 0 1 * *')
        uses: actions/github-script@v6
        with:
          # 使用特殊权限的token
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 获取重试相关参数
            const isRetry = ${{ github.event.inputs.is_retry || 'false' }};
            let retryCount = parseInt(${{ github.event.inputs.retry_count || '0' }});
            
            // 获取当前时间并转换为UTC+8时区
            const now = new Date();
            const utc8Time = new Date(now.getTime() + 8 * 60 * 60 * 1000);
            const currentHour = utc8Time.getHours();
            
            console.log(`当前UTC+8时间: ${utc8Time.toISOString()}`);
            console.log(`当前UTC+8小时: ${currentHour}`);
            console.log(`是否重试: ${isRetry}, 当前重试次数: ${retryCount}`);
            
            // 限制最大重试次数为3次，避免无限重试
            const MAX_RETRIES = 3;
            
            // 检查是否在UTC+8晚上10点前且重试次数未超过限制
            if (currentHour < 22 && retryCount < MAX_RETRIES) {
              retryCount++;
              console.log(`准备进行第${retryCount}次重试，最大重试次数: ${MAX_RETRIES}`);
              
              try {
                // 使用workflow_run替代workflow_dispatch以避免权限问题
                // 或者使用更可靠的重试策略
                console.log(`将通过actions/github-script触发工作流重试`);
                
                // 尝试使用REST API触发重试
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'rainyun-sign.yml',
                  ref: context.ref,
                  inputs: {
                    is_retry: 'true',
                    retry_count: retryCount.toString()
                  }
                });
                
                console.log(`重试已成功安排，将在工作流队列中执行第${retryCount}次尝试`);
              } catch (error) {
                console.error('API触发重试失败:', error.message);
                
                // 如果API调用失败，采用替代方案
                console.log('尝试使用替代方案进行重试...');
                
                // 直接输出重试指令，让用户知道需要手动重试
                console.log('\n=== 重要通知 ===');
                console.log(`工作流执行失败，建议手动触发重试。错误信息: ${error.message}`);
                console.log(`当前已尝试次数: ${retryCount}/3`);
                console.log('=== 重要通知 ===');
              }
            } else if (retryCount >= MAX_RETRIES) {
              console.log(`已达到最大重试次数${MAX_RETRIES}次，停止重试`);
              console.error('工作流执行失败，已超过最大重试次数');
            } else {
              console.log('当前时间已过UTC+8晚上10点，停止重试');
              console.error('工作流执行失败，且已超过重试时间限制');
            }

      # 保活机制 - 优化版
      - name: Keepalive Workflow
        if: github.event.schedule == '0 0 1 * *'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 自动更新工作流文件以保持活跃状态
            try {
              console.log('开始执行工作流保活操作...');
              
              const workflow = await github.rest.actions.getWorkflow({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'rainyun-sign.yml'
              });
              
              // 尝试触发工作流作为保活
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'rainyun-sign.yml',
                ref: context.ref,
                inputs: {
                  is_retry: 'false',
                  retry_count: '0'
                }
              });
              
              console.log('工作流保活成功！');
            } catch (error) {
              console.error('工作流保活失败:', error.message);
              // 提供备选方案建议
              console.log('备选方案: 请考虑创建专用的Personal Access Token并添加为仓库密钥');
            }